# MIT License
# 
# Copyright (c) 2021 Martin Macecek
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

AWSTemplateFormatVersion: 2010-09-09
Description: Regional prerequisites for CD Pipeline

# -----------------------------------------------------------------------------
# Parameters
# -----------------------------------------------------------------------------
Parameters:
  ResourcePrefix:
    Description: The prefix for all resources
    Type: String
    Default: ''
    AllowedPattern: ^$|^[a-z0-9-]{0,7}$
  ArtifactBucketName:
    Description: Artifact Bucket Name
    Type: String
    Default: cd-cp-artifacts

# -----------------------------------------------------------------------------
# Resources
# -----------------------------------------------------------------------------
Resources:
  CodePipelineArtifactStoreKmsKey:
    Type: AWS::KMS::Key
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F76
            reason: "False Positive - because we are using a Condition"
    Properties:
      Description: Used by Assumed Roles in Dev/Test/Prod accounts to Encrypt/Decrypt code
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: !Ref AWS::StackName
        Statement:
          - Sid: Allows admin of the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Sid: Allow use of key in lambda
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com] 
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
          - Sid: !Sub  "Allow use of the key for ${AWS::AccountId}"
            Effect: "Allow"
            Principal: 
              AWS: "*"
            Action: 
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
            Condition:
              StringLike:
                kms:CallerAccount: !Sub ${AWS::AccountId}
  KMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${ResourcePrefix}${ArtifactBucketName}-${AWS::AccountId}-${AWS::Region}'
      TargetKeyId: !Ref CodePipelineArtifactStoreKmsKey
  CodePipelineArtifactStoreBucket:
    Type: AWS::S3::Bucket
    DependsOn: DeleteBucketContent
    Properties:
      BucketName: !Sub '${ResourcePrefix}${ArtifactBucketName}-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
            KMSMasterKeyID: !GetAtt [CodePipelineArtifactStoreKmsKey,Arn]
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
        - Id: Put everything into STANDARD_IA after 90 days
          Transitions:
          - StorageClass: STANDARD_IA
            TransitionInDays: 90
          Status: Enabled  
  DeleteContentFromCodePipelineArtifactStoreBucket:  
    Type: Custom::DeleteContentFromCodePipelineArtifactStoreBucket
    Properties:
      ServiceToken: !Sub '${DeleteBucketContent.Arn}'
      BucketName: !Ref CodePipelineArtifactStoreBucket
  CodePipelineArtifactStoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: s3:PutObject
            Resource: !Sub '${CodePipelineArtifactStoreBucket.Arn}/*'
            Condition:
              StringNotEquals: 
                s3:x-amz-server-side-encryption: aws:kms
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource: !Sub '${CodePipelineArtifactStoreBucket.Arn}/*'
            Condition:
              Bool:
                aws:SecureTransport: false
  DeleteBucketContentRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ResourcePrefix}DeleteBucketContent-Role-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub '${ResourcePrefix}DeleteBucketContent-Policy-${AWS::Region}'
          PolicyDocument:
            Id: !Sub '${ResourcePrefix}DeleteBucketContent-PolicyDocument-${AWS::Region}'
            Version: 2012-10-17
            Statement:
              - Sid: Logging
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Sid: AllowS3Delete
                Effect: Allow
                Action:
                  - 's3:Delete*'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - 'arn:aws:s3:::*'
                  - 'arn:aws:s3:::*/*'
  DeleteBucketContentLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub '/aws/lambda/${ResourcePrefix}DeleteBucketContent'
  DeleteBucketContent:
    Type: AWS::Lambda::Function
    DependsOn: DeleteBucketContentLogGroup
    Properties:
      FunctionName: !Sub '${ResourcePrefix}DeleteBucketContent'
      Code: 
        ZipFile: |
          # This file is part of a Werum IT Solutions GmbH project.
          #
          # Copyright (c)
          # Werum IT Solutions GmbH
          # All rights reserved.
          #
          # Any use of this file as part of a software system by non Copyright holders
          # is subject to license terms.
          #

          import json, boto3, logging, time
          import cfnresponse
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info("event: {}".format(event))
              try:
                  bucket = event['ResourceProperties']['BucketName']
                  logger.info("bucket: {}, event['RequestType']: {}".format(bucket,event['RequestType']))
                  if event['RequestType'] == 'Delete':
                      s3 = boto3.resource('s3')
                      bucket = s3.Bucket(bucket)
                      time.sleep(60)
                      bucket.objects.all().delete()
                      bucket.object_versions.all().delete()

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, event['LogicalResourceId'])
              except Exception as e:
                  logger.info("Exception: {}".format(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, event['LogicalResourceId'])

      Handler: "index.lambda_handler"
      Runtime: python3.8
      MemorySize: 128
      Timeout: 600
      Role: !GetAtt DeleteBucketContentRole.Arn
  ResourcePrefixParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/CD/ResourcePrefix'
      Type: String
      Value: !Ref ResourcePrefix
      Description: The resource prefix for all resources
  DeleteBucketContentLambdaArnParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/Lambda/DeleteBucketContentLambda/Arn'
      Type: String
      Value: !GetAtt DeleteBucketContent.Arn
      Description: The ARN of the DeleteBucketContent Lambda function
  ArtifactBucketNameIdParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/S3/ArtifactBucketNameId'
      Type: String
      Value: !Sub '${ArtifactBucketName}'
      Description: The configurable part of the Artifact Bucket Name